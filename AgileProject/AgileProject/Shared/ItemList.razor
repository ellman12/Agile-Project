@* Displays a list of items as ListItems. *@
@using AgileProject.Backend
@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage Storage
@inject NavigationManager NavigationManager

<AuthChecker/>

<link href="css/components/ItemList.css" rel="stylesheet"/>

<header style="visibility: @(selectedItems.Count > 0 ? "visible" : "hidden")">
	<IconButton Icon="close" OnClick="@(() => selectedItems.Clear())"/>
	<span id="selectedAmt">@selectedItems.Count&nbsp;&nbsp;Selected</span>
</header>

<div id="itemList">
	@if (folders?.Count > 0)
	{
		for (int i = 0; i < folders.Count; i++)
		{
			int ii = i;
			Folder f = folders[i];

			<a onclick="location.href='folder-view/@f.FolderID'">
				<IconButton Icon="check_circle" IconColorHex="@(selectedItems.Contains(f.FolderID) ? "0062FF" : "FFFFFF")" OnClick="@(() => CheckClicked(f.FolderID))"/>
            	<input onclick="event.stopPropagation()" @onfocusout="@(() => Connection.EditFolder(f.FolderID, folders[ii].Name))" type="text" @bind="@folders[ii].Name"/>
            </a>
			
		}
	}
	
	@if (sets?.Count > 0)
	{
		for (int i = 0; i < sets.Count; i++)
		{
			int ii = i;
			Set s = sets[i];

			<a onclick="location.href='set-view/@s.SetID'">
				<IconButton Icon="check_circle" IconColorHex="@(selectedItems.Contains(s.SetID) ? "0062FF" : "FFFFFF")" OnClick="@(() => CheckClicked(s.SetID))"/>
				<input onclick="event.stopPropagation()" @onfocusout="@(() => Connection.EditSet(s.SetID, sets[ii].Name))" type="text" @bind="@sets[ii].Name"/>
			</a>
		}
	}

	<IconButton OnClick="@CreateButtonClick" Icon="add"/>
</div>

@code {
	private List<Folder>? folders;

	[Parameter] public Guid FolderID { get; set; }

	private Guid userID;

	private List<Set>? sets;

	private HashSet<Guid> selectedItems = new();

	protected override async Task OnInitializedAsync()
	{
		ProtectedBrowserStorageResult<string> result = await Storage.GetAsync<string>("userID");
		userID = String.IsNullOrWhiteSpace(result.Value) ? Guid.Empty : Guid.Parse(result.Value);
		if (userID == Guid.Empty) return;

		string currentPage = NavigationManager.Uri.Split('/')[3];

		if (currentPage == "folders")
			folders = Connection.GetFoldersFromUser(userID);
		else if (currentPage == "folder-view" && FolderID != Guid.Empty)
			sets = Connection.GetSetsFromFolder(FolderID);
	}

}

@functions {

	private void CheckClicked(Guid uuid)
	{
		if (selectedItems.Contains(uuid))
			selectedItems.Remove(uuid);
		else
			selectedItems.Add(uuid);
		StateHasChanged();
	}

	private void CreateButtonClick()
	{
		if (FolderID != Guid.Empty)
		{
			Connection.CreateSet(userID, "New set", FolderID);
			sets = Connection.GetSetsFromFolder(FolderID);
		}
		else
		{
			Connection.CreateFolder(userID, "New folder");
			folders = Connection.GetFoldersFromUser(userID);
		}
	}
}